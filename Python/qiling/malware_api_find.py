# 脚本路径
# D:\workspace\qiling\examples\qiling_test.py

# 仿真CobaltStrike的shellcode

from qiling import Qiling
from qiling.const import QL_ARCH, QL_OS, QL_VERBOSE
from unicorn.x86_const import *
from colorama import Fore,Back,Style,init



init(wrap=True, autoreset=True)
# 路径必须要放到这个路径，不然模拟老是有问题
ql = Qiling([r'rootfs/x8664_windows/AppvIsvSubsystems64.dll'], rootfs=r"rootfs/x8664_windows",verbose=QL_VERBOSE.DEFAULT)

# 麒麟框架会自动设置好dllmain
# Setting up call frame for DllMain:
# [+]       HINSTANCE hinstDLL   : 0x387c80000
# [+]       DWORD     fdwReason  : 0x00000001
# [+]       LPVOID    lpReserved : 0x00000000
ql.arch.regs.write('rcx',0x70B983EE)

#ql.debugger = True

ql.run(begin=0x387C8A1E8,end=0x387C8A3B5)

rax_value=ql.arch.regs.read('rax')

# for ntdll.dll
#syscall_stub = ql.mem.read(rax_value-18,18)
# for kernel32.dll
syscall_stub = ql.mem.read(rax_value,20)

hex_str = ' '.join(format(byte, '02x') for byte in syscall_stub)

print(Fore.GREEN+hex(rax_value))
print(hex_str)
